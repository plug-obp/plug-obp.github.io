aliceCS			= |{Alice}1@CS|
bobCS			= |{Bob}1@CS|
exclusionI 		= []!(|{Alice}1@I| && |{Bob}1@I|)
exclusion  		= []!(aliceCS && bobCS)
not_deadlock = []!|deadlock|
exclusionB0 		= 
	states s0, s1;
	initial s0;
	accept s1;
	s0 [!|{Alice}1@CS| or !|{Bob}1@CS|] s0;
	s0 [|{Alice}1@CS| && |{Bob}1@CS|] s1;
	s1 [ true ] s1

exclusionB1 		= 
	states s0, s1;
	initial s0;
	accept s1;
	s0 [!aliceCS or !bobCS] s0;
	s0 [aliceCS && bobCS] s1;
	s1 [ true ] s1



exclusionB2		= 
	let 
		aliceCS1	= |{Alice}1@CS|,
		bobCS1	= |{Bob}1@CS|
	in
		states s0, s1;
		initial s0;
		accept s1;
		s0 [!aliceCS1 or !bobCS1] s0;
		s0 [aliceCS && bobCS] s1;
		s1 [ true ] s1

eventuallyOneInCS 	= []<>(aliceCS || bobCS)

stopInCS = [] !|{Alice}1@CS|

fairness 		= 
	let
		aliceFlagUP=|{sys}1:flags[0] = true|,
		bobFlagUP=|{sys}1:flags[1] = true|
	in 
		 ([]  (  (aliceFlagUP -> (<> aliceCS) )
		      && (bobFlagUP -> (<> bobCS))))  
idling = let
		aliceFlagUP=|{sys}1:flags[0]=true|,
		bobFlagUP=|{sys}1:flags[1]=true|
	in
		([]  (!aliceFlagUP -> (![] aliceCS))
		   && (!bobFlagUP -> (![] bobCS)) )
infoften 		=  [] <> bobCS

idling2 = let 
		Qa=|{sys}1:flags[0]=false  |,
		Ra=|{sys}1:flags[0]=true  |,
		Pa=|{Alice}1@CS |
	in 
	(([]((Qa & !Ra & <>Ra) -> (!Pa U Ra))) \/ (<>Ra -> (!Pa U Ra)))

all = (exclusion & eventuallyOneInCS & fairness & idling)
