model LevelCrossing {

	primitiveType Integer;
	primitiveType Boolean;

	package deployment imports bsp_smt32, system {

		instance instSUS of SUS {

		}
	}

	package bsp_meta imports system {

	}

	package bsp_smt32 imports bsp_meta  {

	}

	package system imports bsp_meta {

		instance instEntranceTrackCircuit of EntranceTC {
			id = 1;
		}

		instance instExitTC of ExitTC {
			id = 2;
		}

		class SUS {
			public composite train[1-1] : Train;
			public composite tcEntrance[2-2] : EntranceTC = instEntranceTrackCircuit;
			public composite tcExit[1-1] : ExitTC = instExitTC;
			public composite controller[1-1] : Controller;
			public composite railwaySign[1-1] : RailwaySign;
			public composite roadSign[1-1] : RoadSign;
			public composite gate[1-1] : Gate;

			connector "c1" : Controller_Gate between gate and controller;
			connector "c2" : Controller_EntranceTC between tcEntrance and controller;
			connector "c3" : Controller_ExitTC between tcExit and controller;
			connector "c4" : Controller_RoadSign between roadSign and controller;
			connector "c5" : Train_EntranceTC between train and tcEntrance;
			connector "c6" : Train_ExitTC between train and tcExit;
			connector "c7" : Controller_RailwaySign between railwaySign and controller;
			connector "c8" : Train_RailwaySign between railwaySign and train;
		}

		signal activation{
			id[1-1] : Integer;
		}
		signalEvent activation_SE of activation;
		signal deactivation;
		signalEvent deactivation_SE of deactivation;

		signal entranceDetection {
			id[1-1] : Integer;
		}
		signalEvent entranceDetection_SE of entranceDetection;
		signal exitDetection {
			id[1-1] : Integer;
		}
		signalEvent exitDetection_SE of exitDetection;

		signal switchOn;
		signalEvent switchOn_SE of switchOn;
		signal switchOff;
		signalEvent switchOff_SE of switchOff;

		signal roadSignOn;
		signalEvent roadSignOn_SE of roadSignOn;
		signal roadSignOff;
		signalEvent roadSignOff_SE of roadSignOff;

		signal open;
		signalEvent open_SE of open;
		signal close;
		signalEvent close_SE of close;

		signal gateOpen;
		signalEvent gateOpen_SE of gateOpen;
		signal gateClosed;
		signalEvent gateClosed_SE of gateClosed;

		signal authorization;
		signalEvent authorization_SE of authorization;

		signal railwaySignOn;
		signalEvent railwaySignOn_SE of railwaySignOn;

		association Controller_RoadSign {
			roadSign[1-1] : RoadSign in Controller_RoadSign;
			controller[1-1] : Controller in Controller_RoadSign;
		}
		association Controller_EntranceTC {
			tcEntrance[2-2] : EntranceTC in Controller_EntranceTC;
			controller[1-1] : Controller in Controller_EntranceTC;
		}
		association Controller_ExitTC {
			tcExit[1-1] : ExitTC in Controller_ExitTC;
			controller[1-1] : Controller in Controller_ExitTC;
		}
		association Controller_Gate {
			gate[1-1] : Gate in Controller_Gate;
			controller[1-1] : Controller in Controller_Gate;
		}
		association Train_EntranceTC {
			train[1-1] : Train in Train_EntranceTC;
			tcEntrance[2-2] : EntranceTC in Train_EntranceTC;
		}
		association Train_ExitTC {
			train[1-1] : Train in Train_ExitTC;
			tcExit[1-1] : ExitTC in Train_ExitTC;
		}
		association Controller_RailwaySign {
			railwaySign[1-1] : RailwaySign in Controller_RailwaySign;
			controller[1-1] : Controller in Controller_RailwaySign;
		}
		association Train_RailwaySign {
			railwaySign[1-1] : RailwaySign in Train_RailwaySign;
			train[1-1] : Train in Train_RailwaySign;
		}

		class |Train| behavesAs SM 
				receives authorization(authorization) {

			stateMachine SM {
				region R {
					Initial -> Idle;
					Idle -> Far : / 
							opaqueBehavior = 'send(activation(0), tcEntrance[0]);' in C;;
					Far -> Close :  /
							opaqueBehavior = 'send(activation(1), tcEntrance[1]);' in C;;
					Close -> Passing : authorization_SE / ;
					Passing -> Idle :  /
							opaqueBehavior = 'send(activation, tcExit);' in C;;
					initial pseudoState Initial;
				}
			}
		}

		class |EntranceTC| behavesAs SM receives activation(activation), deactivation(deactivation) {
			private id[1-1] : Integer;

			stateMachine SM {
				region R {
					Initial -> Detection;
					Detection -> Detection : activation_SE /
							opaqueBehavior = 'int tmp = params.id; send(entranceDetection(tmp), controller);' in C;;
					initial pseudoState Initial;
				}
			}
		}

		class |ExitTC| behavesAs SM receives activation(activation), deactivation(deactivation) {
			private id[1-1] : Integer;

			stateMachine SM {
				region R {
					Initial -> Detection;
					Detection -> Detection : activation_SE /
							opaqueBehavior = 'send(exitDetection(id), controller);' in C;;
					initial pseudoState Initial;
				}
			}
		}

		class |Controller| behavesAs SM receives entranceDetection(entranceDetection), exitDetection(exitDetection),
						roadSignOn(roadSignOn), roadSignOff(roadSignOff),
						railwaySignOn(railwaySignOn),
						gateOpen(gateOpen), gateClosed(gateClosed) {
			
			private nbEngagedTrains[1-1] : Integer;

			stateMachine SM {
				region R {
					Initial -> Idle: /
							opaqueBehavior = 'nbEngagedTrains = 0;' in  C;;

					Idle -> WaitRoadSignOn : entranceDetection_SE  [constraint "" is opaqueExpression = 'nbEngagedTrains == 0' in C;] /
							opaqueBehavior = 'send(switchOn, roadSign);' in  C;;
					WaitRoadSignOn -> FarDetection : roadSignOn_SE  / ;
					FarDetection -> CloseDetection : entranceDetection_SE /
							opaqueBehavior = 'send(close, gate); nbEngagedTrains++;' in  C;;
					CloseDetection -> Idle : gateClosed_SE /
							opaqueBehavior = 'send(switchOff, railwaySign);' in  C;;

					Idle -> WaitRailwaySignOn : exitDetection_SE [constraint "" is opaqueExpression = 'nbEngagedTrains == 1' in C;] /
							opaqueBehavior = 'send(switchOn, railwaySign);' in  C;;
					WaitRailwaySignOn -> WaitGateOpen : railwaySignOn_SE /
							opaqueBehavior = 'send(open, gate); nbEngagedTrains--;' in  C;;
					WaitGateOpen -> WaitRoadSignOff : gateOpen_SE /
							opaqueBehavior = 'send(switchOff, roadSign);' in  C;;
					WaitRoadSignOff -> Idle : roadSignOff_SE / ;
					initial pseudoState Initial;
				}
			}
		}



		class |RoadSign| behavesAs SM 
				receives switchOn(switchOn), switchOff(switchOff) {
			
			stateMachine SM {
				region R {
					Initial -> Inactive;
					Inactive -> Active : switchOn_SE / 
							opaqueBehavior = 'send(roadSignOn, controller);' in C;;
					Active -> Inactive : switchOff_SE / 
							opaqueBehavior = 'send(roadSignOff, controller);' in C;;
					initial pseudoState Initial;
				}
			}
		}

		class |Gate| behavesAs SM 
				receives open(open), close(close) {
			
			stateMachine SM {
				region R {
					Initial -> Open;
					Open -> Closed : close_SE /
							opaqueBehavior = 'send(gateClosed, controller);' in C;;
					Closed -> Open : open_SE /
							opaqueBehavior = 'send(gateOpen, controller);' in C;;
					initial pseudoState Initial;
				}
			}
		}

		class |RailwaySign| behavesAs SM
				receives switchOn(switchOn), switchOff(switchOff) {
			
			private id[1-1] : Integer;

			stateMachine SM {
				region R {
					Initial -> Active;
					Active -> Inactive : switchOff_SE /
						opaqueBehavior = 'send(authorization, train);' in C;;
					Inactive -> Active : switchOn_SE /
						opaqueBehavior = 'send(railwaySignOn, controller);' in C;;
					initial pseudoState Initial;
				}
			}
		}

	}
}
